name: Helm Release TA system

on:
  workflow_call:
    inputs:
      LOCATION:
        type: string
        required: true
      BUILD:
        description: "Actual boolean flag to make build docker image, BUT BEWARE IT IS PASSING AS STRING"
        type: string
        required: false
      DOCKERFILE:
        description: "Dockerfile path relative to context"
        type: string
        required: false
        default: "./tools/Dockerfile"
      CONTEXT:
        description: "Context for dockerfile"
        type: string
        required: false
        default: "."
      APP_SYSTEM:
        description: "Common chart for system"
        type: string
        required: true
        default: ''
      DOCKER_REGISTRY:
        description: "Docker registry for helm chart"
        type: string
        required: false
        default: "docker-registry.trendagent.ru:5000"
    outputs:
#      APP_VERSION:
#        description: "Application version"
#        value: ${{ jobs.version.outputs.APP_VERSION }}
      IMAGE:
        description: "Docker image name"
        value: ${{ jobs.variables.outputs.IMAGE }}
    secrets:
      DEV_KUBE_CONFIG:
        required: false
      ROOT_TOKEN:
        required: true
      DOCKER_REGISTRY_USER:
        required: true
      DOCKER_REGISTRY_PASSWORD:
        required: true
      GPT_TOKEN:
        required: true

jobs:
  version:
    name: Get version
    runs-on: [ self-hosted, docker-runner ]
    # Map the job outputs to step outputs
    outputs:
      APP_NAME: ${{ steps.step1.outputs.name }}
      APP_VERSION: ${{ steps.step2.outputs.version }}
      NAME: ${{ steps.step3.outputs.NAME }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - id: step1
        run: echo "name=$(awk -F "\"" '/name/{print $4; exit}' ./package.json)" >> $GITHUB_OUTPUT
      - id: step2
        run: echo "version=$(awk -F "\"" '/version/{print $4; exit}' ./package.json)" >> $GITHUB_OUTPUT
      - id: step3
        run: echo "NAME=${{ inputs.DOCKER_REGISTRY }}/${{ steps.step1.outputs.name }}:${{ steps.step2.outputs.version }}-${{ github.sha }}" >> $GITHUB_OUTPUT
      - name: get name
        run: echo ${{ steps.step1.outputs.name }}
      - name: get version
        run: echo ${{ steps.step2.outputs.version }}
      - name: image name
        run: echo ${{ steps.step3.outputs.NAME }}
      - name: release version is ${{ steps.step1.outputs.name }}-${{ github.sha }}
        run: echo ${{ steps.step1.outputs.name }}:${{ steps.step2.outputs.version }}-${{ github.sha }}

  build:
    if: inputs.BUILD == 'true'
    name: Build & push docker image
    runs-on: [ self-hosted, docker-runner ]
    needs: [version ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Context for Buildx
        run: docker context create builders

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          endpoint: builders

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log into Docker registry
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.CONTEXT }}
          file: ${{ inputs.DOCKERFILE }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ inputs.DOCKER_REGISTRY }}/${{ needs.version.outputs.APP_NAME }}:${{ github.sha }}
            ${{ needs.version.outputs.IMAGE }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          build-args: |
            "NPM_TOKEN=${{ secrets.GPT_TOKEN }}"

  chart:
    needs: [ version, build ]
    runs-on: [ self-hosted, docker-runner ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.3

      - name: Log into Docker registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}

      - name: Update Chart
        uses: trend-dev/inplace-envsubst-action@main
        env:
          APP_NAME: ${{ needs.version.outputs.APP_NAME }}
          APP_VERSION: ${{ needs.version.outputs.APP_VERSION }}
        with:
          working-directory: './tools/charts/${{ needs.version.outputs.APP_NAME }}'
          fail_on_missing_variables: "true"
          search_input: |
            {
            "patterns": [".+.yaml"],
            "files": ["Chart.yaml"],
            "depth": 1
            }

      - name: Publish chart
        shell: bash
        run: |
          cd './tools/charts/${{ needs.version.outputs.APP_NAME }}'
          helm registry login -u ${{ secrets.DOCKER_REGISTRY_USER }} -p ${{ secrets.DOCKER_REGISTRY_PASSWORD }} ${{ inputs.DOCKER_REGISTRY }}
          helm package ./
          helm push ${{ needs.version.outputs.APP_NAME }}-${{ needs.version.outputs.APP_VERSION }}.tgz oci://${{ inputs.DOCKER_REGISTRY }}/helm-charts


  release:
    needs: [ version, chart ]
    runs-on: [ self-hosted, docker-runner ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: trend-dev/${{ inputs.APP_SYSTEM }}
          ref: ${{ github.event.inputs.LOCATION }}
          fetch-depth: 0
          token: ${{ secrets.ROOT_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.3

      - name: Prepare propertyPath
        id: path
        run: echo "VALUE=$.dependencies[?(@.name=='${{ inputs.APP_NAME }}')].version" >> $GITHUB_OUTPUT

      - name: Add DEV Kube config
        if: ${{ github.event.inputs.LOCATION != 'beta' }}
        shell: bash
        run: |
          mkdir -p ~/.kube
          echo ${{ secrets.DEV_KUBE_CONFIG }} | base64 -d > ~/.kube/config

      - name: Update Image Version in the related HelmChart values.yaml
        if: ${{ needs.version.outputs.APP_VERSION != '' }}
        uses: fjogeleit/yaml-update-action@main
        with:
          valueFile: 'charts/${{ inputs.APP_SYSTEM }}/Chart.yaml'
          propertyPath: ${{ steps.path.outputs.VALUE }}
          value: ${{ needs.version.outputs.APP_VERSION }}
          branch: ${{ inputs.LOCATION }}
          message: Update ${{ needs.version.outputs.APP_NAME }} in ${{ inputs.APP_SYSTEM }}
          repository: trend-dev/${{ inputs.APP_SYSTEM }}
          token: ${{ secrets.ROOT_TOKEN }}

      - name: Upgrade Dev
        if: ${{ github.event.inputs.LOCATION != 'beta' }}
        shell: bash
        run: |
          helm registry login -u ${{ secrets.DOCKER_REGISTRY_USER }} -p ${{ secrets.DOCKER_REGISTRY_PASSWORD }} ${{ inputs.DOCKER_REGISTRY }}
          cd ./charts/${{ inputs.APP_SYSTEM }}/
          helm dependency build ./
          helm upgrade ${{ inputs.APP_SYSTEM }} --install --namespace ${{ inputs.LOCATION }} ./

      - name: Clear artifacts
        shell: bash
        run: |
          rm -rf ~/.kube

  slackNotification:
    needs: release
    if: ${{ github.event.inputs.LOCATION != 'ta-production' }}
    name: Slack Notification
    runs-on: [ self-hosted, docker-runner ]
    steps:
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4

      - uses: actions/checkout@v4
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_TA_DEPLOY_CHANNEL }}
          SLACK_USERNAME: Уведомление об успешности развертывания проекта
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: ${{ github.repository }}
          SLACK_MESSAGE: |
            Окружение: ${{ github.event.inputs.LOCATION }}
            Ветка: ${{ env.GITHUB_REF_SLUG }}
          SLACK_ICON_EMOJI: ":white_check_mark:"
          MSG_MINIMAL: true